<?php
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-02-28 at 13:16:43.
 */
namespace Kanedo;

use \OAuth\Common\Http\Uri\Uri;
use \OAuth\OAuth2\Token\StdOAuth2Token;
use \OAuth\Common\Http\Exception\TokenResponseException;

class Request extends \OAuth\OAuth2\Service\AbstractService{

	public function __construct(
        \OAuth\Common\Consumer\CredentialsInterface $credentials,
        \OAuth\Common\Http\Client\ClientInterface $httpClient,
        \OAuth\Common\Storage\TokenStorageInterface $storage,
        $scopes = array(),
        \OAuth\Common\Http\Uri\UriInterface $baseApiUri = null
    ) {
        parent::__construct($credentials, $httpClient, $storage, $scopes, $baseApiUri);

        if (null === $baseApiUri) {
            $this->baseApiUri = new Uri('https://www.readability.com/api/rest/v1/');
        }
    }

	public function getAuthorizationEndpoint(){
		return new Uri("https://www.readability.com/api/rest/v1/oauth/authorize/");
	}

	public function getAccessTokenEndpoint(){
		return new Uri("https://www.readability.com/api/rest/v1/oauth/access_token/");
	}

	protected function parseAccessTokenResponse($responseBody)
    {
        $data = json_decode($responseBody, true);

        if (null === $data || !is_array($data)) {
            throw new TokenResponseException('Unable to parse response.');
        } elseif (isset($data['error'])) {
            throw new TokenResponseException('Error in retrieving token: "' . $data['error'] . '"');
        }

        $token = new StdOAuth2Token();
        $token->setAccessToken($data['access_token']);

        if (isset($data['expires_in'])) {
            $token->setLifetime($data['expires_in']);
            unset($data['expires_in']);
        }

        if (isset($data['refresh_token'])) {
            $token->setRefreshToken($data['refresh_token']);
            unset($data['refresh_token']);
        }

        unset($data['access_token']);

        $token->setExtraParams($data);

        return $token;
    }
}
